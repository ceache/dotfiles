" Terminal fixups done first.
" {{{
if has('multi_byte')
    set encoding=utf-8
endif
if &term == 'screen'
    set termencoding=utf8
    " Force 256 color.
    set t_Co=256
endif
if &t_Co == 256
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    set t_ut=
endif
" }}}

" Plugins
" {{{
function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

call plug#begin('~/.vim/bundles')

Plug 'tpope/vim-sensible'
Plug 'jceb/vim-hier'
Plug 'timakro/vim-searchant'

Plug 'lifepillar/vim-solarized8',                   Cond(&t_Co >= 16)
Plug 'altercation/vim-colors-solarized',            Cond(&t_Co < 16)

Plug 'ctrlpvim/ctrlp.vim'

Plug 'prabirshrestha/async.vim'
Plug 'skywind3000/asyncrun.vim'
Plug 'prabirshrestha/asyncomplete.vim',             Cond(has('timers'))

Plug 'prabirshrestha/vim-lsp',                      Cond(has('timers'))
Plug 'prabirshrestha/asyncomplete-lsp.vim',         Cond(has('timers'))

Plug 'Shougo/neco-vim'
Plug 'prabirshrestha/asyncomplete-necovim.vim',     Cond(has('timers'))

Plug 'rust-lang/rust.vim'

call plug#end()
" }}}

" Solarized
" {{{
set background=dark
if &t_Co == 16
    " Tell solized8 (below) to downgrade to 16 colors (should be automatic!?!).
    let g:solarized_use16 = 1
endif
if &t_Co >= 16
    colorscheme solarized8_dark_high
else
    colorscheme solarized
endif
" }}}

" LSP
" {{{
" enable signs
let g:lsp_signs_enabled = 1
" enable echo under cursor when in normal mode
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_signs_error = {'text': 'X'}
highlight link LspErrorText ErrorMsg
let g:lsp_signs_warning = {'text': 'â€¼'}
highlight link LspWarningText WarningMsg
let g:lsp_signs_hint = {'text': 'i'}
highlight link LspInfoText Normal
" }}}

" QuickFix window
" {{{
" Fix the background of the current line in the Quick window.
highlight QuickFixLine ctermbg=0
let g:hier_highlight_group_qf='LspErrorText'
let g:hier_highlight_group_qfw='LspWarnText'
let g:hier_highlight_group_qfi='LspInfoText'
" }}}

" Highligh end of lines
" {{{
highlight ExtraWhitespace ctermbg=darkcyan guibg=darkcyan
" Show trailing whitepaces:
autocmd Syntax * syn match ExtraWhitespace /\s\+\%#\@<!$/
" }}}

" Tab control
" {{{
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
autocmd Filetype make setlocal noexpandtab
" }}}

" Various settings
" {{{
" Display line number in gutter.
set number
" Add a visible column at 79.
set colorcolumn=79
" Disable buffer resize on close.
set noequalalways

" Search options.
set incsearch
set ignorecase
set smartcase
" }}}

" CtrlP options.
" {{{
let g:ctrlp_user_command = {
    \ 'types': {
      \ 1: ['.git', 'cd %s && git ls-files . -co --exclude-standard'],
      \ 2: ['.hg', 'hg --cwd %s locate -I .'],
      \ },
    \ 'fallback': 'find %s -type f'
    \ }
" }}}

" Rust options.
" {{{
let g:rustfmt_autosave = 1
" }}}

" Code Complete
" {{{
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"

au User asyncomplete_setup call asyncomplete#register_source(
    \ asyncomplete#sources#necovim#get_source_options({
        \ 'name': 'necovim',
        \ 'whitelist': ['vim'],
        \ 'completor': function('asyncomplete#sources#necovim#completor'),
        \ })
    \ )

if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })

endif

if executable('rls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'rls',
        \ 'cmd': {server_info->['rls']},
        \ 'whitelist': ['rust'],
        \ })
endif
" }}}
